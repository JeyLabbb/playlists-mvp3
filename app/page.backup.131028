"use client";

import { useState } from "react";
import { signIn, signOut, useSession } from "next-auth/react";

export default function Home() {
  const { data: session } = useSession();

  const [promptText, setPromptText] = useState("");
  const [count, setCount] = useState(50);
  const [tracks, setTracks] = useState([]);
  const [loading, setLoading] = useState(false);
  const [creating, setCreating] = useState(false);
  const [msg, setMsg] = useState("");
  const [progress, setProgress] = useState(0);
  const [lastLinks, setLastLinks] = useState(null);

  async function generarLista() {
    setMsg("");
    setTracks([]);
    setProgress(0);
    setLastLinks(null);

    try {
      setLoading(true);

      // 1) Plan con OpenAI
      const planRes = await fetch("/api/plan", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ prompt: promptText, count }),
      });
      const planData = await planRes.json();
      if (!planRes.ok || !planData?.ok) throw new Error(planData?.error || "plan-failed");

      const plan = planData.plan;
      const target = Number(plan.count) || Number(count) || 50;
      const pageSize = 50;
      let acc = [];

      setMsg("Pensando la estrategia (IA)… Puede tardar un poco.");
      for (let page = 1; acc.length < target && page <= 30; page++) {
        setMsg(`Buscando canciones… (${acc.length}/${target})`);
        const r = await fetch("/api/recs", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ plan, page, pageSize }),
        });
        const d = await r.json();
        if (!r.ok || !d?.ok) throw new Error(d?.error || "recs-failed");

        const seen = new Set(acc.map(t => t.id));
        for (const t of (d.tracks || [])) {
          if (!seen.has(t.id)) { seen.add(t.id); acc.push(t); }
        }

        setProgress(Math.min(1, acc.length / target));
        setTracks([...acc]);
      }

      if (!acc.length) setMsg("⚠️ No se encontraron canciones para ese prompt. Ajusta un poco el texto.");
      else setMsg("✔️ Lista generada. Revisa y crea la playlist en Spotify.");
    } catch (e) {
      setMsg("⚠️ Error al recomendar. Inicia sesión y prueba otra vez.");
    } finally {
      setLoading(false);
    }
  }

  async function crearEnSpotify() {
    if (!tracks.length) { setMsg("⚠️ Genera una lista primero."); return; }
    try {
      setCreating(true);
      setMsg("");

      const res = await fetch("/api/create", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          name: promptText?.trim() || "Mi playlist",
          tracks: tracks.map(t => t.uri),
          descriptionExtra: promptText?.trim()?.slice(0, 120) || "",
        }),
      });
      const data = await res.json();
      if (!res.ok) throw new Error(data?.error || "create-failed");

      setMsg("✅ Playlist creada. Abriendo Spotify…");
      setLastLinks({ web: data.webUrl, app: data.appUrl });

      const fallback = setTimeout(() => window.open(data.webUrl, "_blank"), 800);
      window.location.href = data.appUrl;
      clearTimeout(fallback);
    } catch (e) {
      setMsg("⚠️ No se pudo crear la playlist. Vuelve a iniciar sesión y prueba de nuevo.");
    } finally {
      setCreating(false);
    }
  }

  return (
    <main className="p-8 space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-semibold">Playlist IA (MVP)</h1>
        <div>
          {session ? (
            <div className="flex gap-3 items-center">
              <span className="text-sm text-gray-600">Conectado: {session.user?.name || session.user?.email}</span>
              <button className="border px-3 py-1 rounded" onClick={() => signOut()}>Cerrar sesión</button>
            </div>
          ) : (
            <button className="border px-3 py-1 rounded" onClick={() => signIn("spotify")}>Iniciar sesión con Spotify</button>
          )}
        </div>
      </div>

      <p className="mb-2">Escribe lo que te apetece y probamos:</p>
      <textarea
        className="w-full p-3 border rounded"
        rows={4}
        placeholder="Ej: Fiesta bailable en español, 2000s–actualidad, energía alta, 200 canciones"
        value={promptText}
        onChange={(e) => setPromptText(e.target.value)}
      />

      <div className="mt-3 flex items-center gap-4">
        <label className="text-sm text-gray-700">Nº canciones</label>
        <input
          type="number"
          min={1}
          max={500}
          value={count}
          onChange={(e) => setCount(Math.max(1, Math.min(500, Number(e.target.value)||50)))}
          className="w-24 p-2 border rounded"
        />
      </div>

      {loading && (
        <div className="w-full h-2 bg-gray-200 rounded">
          <div className="h-2 bg-black rounded" style={{ width: `${Math.round(progress*100)}%` }} />
        </div>
      )}

      <div className="flex gap-3">
        <button disabled={loading} className="border px-3 py-2 rounded" onClick={generarLista}>
          {loading ? "Generando…" : "Generar lista"}
        </button>
        <button disabled={creating || !tracks.length} className="border px-3 py-2 rounded" onClick={crearEnSpotify}>
          {creating ? "Creando…" : "Crear en mi Spotify"}
        </button>
      </div>

      {msg && <p className="text-sm">{msg} {lastLinks?.web && <a className="underline ml-2" href={lastLinks.web} target="_blank">Abrir</a>}</p>}

      <div className="divide-y">
        {tracks.map((t, i) => (
          <div key={t.id || i} className="py-3 flex justify-between items-center">
            <div>
              <div>{t.name}</div>
              <div className="text-sm text-gray-600">{t.artists}</div>
            </div>
            <a className="text-sm underline" href={t.open_url} target="_blank">Abrir</a>
          </div>
        ))}
      </div>
    </main>
  );
}
