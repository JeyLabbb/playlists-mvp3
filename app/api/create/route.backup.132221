import { NextResponse } from "next/server";
import { getToken } from "next-auth/jwt";

export async function POST(req) {
  try {
    const token = await getToken({ req, secret: process.env.NEXTAUTH_SECRET });
    if (!token?.accessToken) return NextResponse.json({ error: "no-access-token" }, { status: 401 });

    const { name = "Mi playlist", tracks = [], descriptionExtra = "" } = await req.json();

    const meR = await fetch("https://api.spotify.com/v1/me", {
      headers: { Authorization: `Bearer ${token.accessToken}` },
    });
    if (!meR.ok) return NextResponse.json({ error: "me-failed" }, { status: meR.status });
    const me = await meR.json();

    const createR = await fetch(`https://api.spotify.com/v1/users/${me.id}/playlists`, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${token.accessToken}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        name: String(name).slice(0, 100),
        public: true,
        description: `Generada con IA (demo) — by JeyLabbb${descriptionExtra ? " — " + String(descriptionExtra).slice(0, 200) : ""}`,
      }),
    });
    const created = await createR.json();
    if (!createR.ok) return NextResponse.json({ error: "create-failed", details: created }, { status: createR.status });

    const uris = tracks.filter(Boolean);
    for (let i = 0; i < uris.length; i += 100) {
      const chunk = uris.slice(i, i + 100);
      const addR = await fetch(`https://api.spotify.com/v1/playlists/${created.id}/tracks`, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token.accessToken}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ uris: chunk }),
      });
      if (!addR.ok) {
        const det = await addR.json().catch(() => ({}));
        return NextResponse.json({ error: "add-failed", details: det }, { status: addR.status });
      }
    }

    return NextResponse.json({
      ok: true,
      webUrl: `https://open.spotify.com/playlist/${created.id}`,
      appUrl: `spotify:playlist:${created.id}`,
    });
  } catch (e) {
    return NextResponse.json({ error: "server", message: String(e?.message || e) }, { status: 500 });
  }
}

export const GET = POST;
