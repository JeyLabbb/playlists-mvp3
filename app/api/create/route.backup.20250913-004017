import { NextResponse } from "next/server";
import { getToken } from "next-auth/jwt";

/** Normaliza cualquier cosa de entrada a URI de track */
function toTrackUri(x) {
  if (!x) return null;
  if (typeof x === "string") {
    if (x.startsWith("spotify:track:")) return x;
    if (x.startsWith("http")) {
      const m = x.match(/track\/([A-Za-z0-9]+)/);
      return m ? `spotify:track:${m[1]}` : null;
    }
    // si parece un ID plano
    if (/^[A-Za-z0-9]+$/.test(x)) return `spotify:track:${x}`;
    return null;
  }
  // objetos {id}, {uri}
  if (x.uri) return toTrackUri(String(x.uri));
  if (x.id) return `spotify:track:${x.id}`;
  return null;
}

async function sp(url, opts = {}) {
  const r = await fetch(url, opts);
  let data = null;
  try { data = await r.json(); } catch {}
  return { ok: r.ok, status: r.status, data };
}

export async function POST(req) {
  try {
    const token = await getToken({ req, secret: process.env.NEXTAUTH_SECRET });
    if (!token?.accessToken) {
      return NextResponse.json({ error: "no-access-token" }, { status: 401 });
    }

    const body = await req.json().catch(() => ({}));
    const name = String(body?.name || "Playlist IA");
    const description = String(
      body?.description || "Generada con IA (Demo) — by JLabbb"
    );
    const isPublic = !!body?.isPublic;

    const inputTracks = Array.isArray(body?.tracks) ? body.tracks : [];
    const uris = inputTracks.map(toTrackUri).filter(Boolean);

    // 1) Obtener usuario
    const meR = await sp("https://api.spotify.com/v1/me", {
      headers: { Authorization: `Bearer ${token.accessToken}` },
      cache: "no-store",
    });
    if (!meR.ok) {
      return NextResponse.json(
        { error: "me-fail", status: meR.status, body: meR.data },
        { status: meR.status }
      );
    }
    const userId = meR.data?.id;

    // 2) Crear playlist
    const createR = await sp(`https://api.spotify.com/v1/users/${userId}/playlists`, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${token.accessToken}`,
        "content-type": "application/json",
      },
      body: JSON.stringify({ name, description, public: isPublic }),
    });
    if (!createR.ok) {
      return NextResponse.json(
        { error: "create-fail", status: createR.status, body: createR.data },
        { status: createR.status }
      );
    }
    const playlistId = createR.data?.id;
    const openUrl =
      createR.data?.external_urls?.spotify ||
      `https://open.spotify.com/playlist/${playlistId}`;

    // 3) Añadir pistas en bloques de 100
    if (uris.length) {
      for (let i = 0; i < uris.length; i += 100) {
        const slice = uris.slice(i, i + 100);
        const addR = await sp(
          `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,
          {
            method: "POST",
            headers: {
              Authorization: `Bearer ${token.accessToken}`,
              "content-type": "application/json",
            },
            body: JSON.stringify({ uris: slice }),
          }
        );
        if (!addR.ok) {
          return NextResponse.json(
            { error: "add-fail", status: addR.status, body: addR.data },
            { status: addR.status }
          );
        }
      }
    }

    return NextResponse.json({
      ok: true,
      id: playlistId,
      url: openUrl,
      added: uris.length,
      message: "Playlist creada y canciones añadidas",
    });
  } catch (e) {
    return NextResponse.json(
      { error: "server", message: String(e?.message || e) },
      { status: 500 }
    );
  }
}

export const GET = POST;
