import { NextResponse } from "next/server";

export async function POST(req) {
  try {
    const { prompt = "", count = 30 } = await req.json();
    const model = process.env.OPENAI_MODEL || "gpt-4o-mini";
    if (!process.env.OPENAI_API_KEY) {
      return NextResponse.json({ error: "openai-key-missing" }, { status: 500 });
    }

    const system = `
Eres un planificador musical. Devuelve SOLO JSON en español con esta forma:
{
  "queries": ["...","..."],
  "filters": {
    "min_energy": 0.0, "max_energy": 1.0,
    "min_danceability": 0.0, "max_danceability": 1.0,
    "min_valence": 0.0, "max_valence": 1.0
  },
  "count": 50
}
Reglas:
- No expliques nada, SOLO JSON válido.
- "queries" útiles para buscar en Spotify.
- Respeta "count" si el usuario lo pide. Si no, usa 50.
- Si el prompt pide "sin voces", "energía alta", etc., refleja eso en los filtros.
`.trim();

    const user = `Prompt: ${JSON.stringify(prompt)}. Quiero aproximadamente ${Number(count)||50} canciones.`;

    const r = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model,
        temperature: 0.2,
        response_format: { type: "json_object" },
        messages: [
          { role: "system", content: system },
          { role: "user", content: user },
        ],
      }),
    });

    const data = await r.json();
    if (!r.ok) {
      return NextResponse.json({ error: "openai", details: data }, { status: r.status });
    }

    const content = data.choices?.[0]?.message?.content || "{}";
    let plan = {};
    try { plan = JSON.parse(content); } catch {}
    const queries = Array.from(new Set((plan.queries || []).map(q => String(q).trim()).filter(Boolean))).slice(0, 8);
    const wanted = Math.max(1, Math.min(Number(plan.count || count || 50), 500));
    const filters = plan.filters || {};

    return NextResponse.json({ ok: true, plan: { queries, count: wanted, filters } });
  } catch (e) {
    return NextResponse.json({ error: "server", message: String(e?.message || e) }, { status: 500 });
  }
}

export const GET = POST;
